import { Provider } from '../providers/provider';
import { Base64DataBuffer } from '../serialization/base64';
import { SuiAddress, TransactionResponse } from '../types';
import { SignaturePubkeyPair, Signer } from './signer';
import { MoveCallTransaction, MergeCoinTransaction, SplitCoinTransaction, TransferObjectTransaction, TxnDataSerializer, PublishTransaction } from './txn-data-serializers/txn-data-serializer';
export declare abstract class SignerWithProvider implements Signer {
    readonly provider: Provider;
    readonly serializer: TxnDataSerializer;
    abstract getAddress(): Promise<SuiAddress>;
    /**
     * Returns the signature for the data and the public key of the signer
     */
    abstract signData(data: Base64DataBuffer): Promise<SignaturePubkeyPair>;
    abstract connect(provider: Provider): SignerWithProvider;
    constructor(provider?: Provider, serializer?: TxnDataSerializer);
    /**
     * Sign a transaction and submit to the Gateway for execution
     *
     * @param txBytes BCS serialised TransactionData bytes
     */
    signAndExecuteTransaction(txBytes: Base64DataBuffer): Promise<TransactionResponse>;
    /**
     * Serialize and Sign a `TransferObject` transaction and submit to the Gateway for execution
     */
    transferObject(transaction: TransferObjectTransaction): Promise<TransactionResponse>;
    /**
     * Serialize and Sign a `MergeCoin` transaction and submit to the Gateway for execution
     */
    mergeCoin(transaction: MergeCoinTransaction): Promise<TransactionResponse>;
    /**
     * Serialize and Sign a `SplitCoin` transaction and submit to the Gateway for execution
     */
    splitCoin(transaction: SplitCoinTransaction): Promise<TransactionResponse>;
    /**
     * Serialize and Sign a `MoveCall` transaction and submit to the Gateway for execution
     */
    executeMoveCall(transaction: MoveCallTransaction): Promise<TransactionResponse>;
    publish(transaction: PublishTransaction): Promise<TransactionResponse>;
}
