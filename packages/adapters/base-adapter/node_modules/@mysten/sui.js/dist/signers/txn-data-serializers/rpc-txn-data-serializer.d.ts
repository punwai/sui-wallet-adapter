import { Base64DataBuffer } from '../../serialization/base64';
import { SuiAddress } from '../../types';
import { MoveCallTransaction, MergeCoinTransaction, SplitCoinTransaction, TransferObjectTransaction, PublishTransaction, TxnDataSerializer } from './txn-data-serializer';
/**
 * This is a temporary implementation of the `TxnDataSerializer` class
 * that uses the Sui Gateway RPC API to serialize a transaction into BCS bytes.
 * This class will be deprecated once we support BCS serialization in TypeScript.
 * It is not safe to use this class in production because one cannot authenticate
 * the encoding.
 */
export declare class RpcTxnDataSerializer implements TxnDataSerializer {
    private client;
    /**
     * Establish a connection to a Sui Gateway endpoint
     *
     * @param endpoint URL to the Sui Gateway endpoint
     */
    constructor(endpoint: string);
    newTransferObject(signerAddress: SuiAddress, t: TransferObjectTransaction): Promise<Base64DataBuffer>;
    newMoveCall(signerAddress: SuiAddress, t: MoveCallTransaction): Promise<Base64DataBuffer>;
    newMergeCoin(signerAddress: SuiAddress, t: MergeCoinTransaction): Promise<Base64DataBuffer>;
    newSplitCoin(signerAddress: SuiAddress, t: SplitCoinTransaction): Promise<Base64DataBuffer>;
    newPublish(signerAddress: SuiAddress, t: PublishTransaction): Promise<Base64DataBuffer>;
}
