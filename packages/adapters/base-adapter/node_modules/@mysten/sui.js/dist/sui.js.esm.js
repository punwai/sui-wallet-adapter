import nacl from 'tweetnacl';
import { Buffer as Buffer$1 } from 'buffer';
import BN, { BN as BN$1 } from 'bn.js';
import { sha3_256 } from 'js-sha3';
import { TextEncoder } from 'util';
import RpcClient from 'jayson/lib/client/browser';
import fetch from 'cross-fetch';

// Copyright (c) 2022, Mysten Labs, Inc.
var Base64DataBuffer = /*#__PURE__*/function () {
  function Base64DataBuffer(data) {
    if (typeof data === 'string') {
      this.data = new Uint8Array(Buffer$1.from(data, 'base64'));
    } else {
      this.data = data;
    }
  }

  var _proto = Base64DataBuffer.prototype;

  _proto.getData = function getData() {
    return this.data;
  };

  _proto.getLength = function getLength() {
    return this.data.length;
  };

  _proto.toString = function toString() {
    return Buffer$1.from(this.data).toString('base64');
  };

  return Base64DataBuffer;
}();

// Copyright (c) 2022, Mysten Labs, Inc.
var PUBLIC_KEY_SIZE = 32;

function isPublicKeyData(value) {
  return value._bn !== undefined;
}
/**
 * A public key
 */


var PublicKey = /*#__PURE__*/function () {
  /**
   * Create a new PublicKey object
   * @param value ed25519 public key as buffer or base-64 encoded string
   */
  function PublicKey(value) {
    if (isPublicKeyData(value)) {
      this._bn = value._bn;
    } else {
      if (typeof value === 'string') {
        var buffer = Buffer$1.from(value, 'base64');

        if (buffer.length !== 32) {
          throw new Error("Invalid public key input. Expected 32 bytes, got " + buffer.length);
        }

        this._bn = new BN(buffer);
      } else {
        this._bn = new BN(value);
      }

      if (this._bn.byteLength() > PUBLIC_KEY_SIZE) {
        throw new Error("Invalid public key input");
      }
    }
  }
  /**
   * Checks if two publicKeys are equal
   */


  var _proto = PublicKey.prototype;

  _proto.equals = function equals(publicKey) {
    return this._bn.eq(publicKey._bn);
  }
  /**
   * Return the base-64 representation of the public key
   */
  ;

  _proto.toBase64 = function toBase64() {
    return this.toBuffer().toString('base64');
  }
  /**
   * Return the byte array representation of the public key
   */
  ;

  _proto.toBytes = function toBytes() {
    return this.toBuffer();
  }
  /**
   * Return the Buffer representation of the public key
   */
  ;

  _proto.toBuffer = function toBuffer() {
    var b = this._bn.toArrayLike(Buffer$1);

    if (b.length === PUBLIC_KEY_SIZE) {
      return b;
    }

    var zeroPad = Buffer$1.alloc(PUBLIC_KEY_SIZE);
    b.copy(zeroPad, PUBLIC_KEY_SIZE - b.length);
    return zeroPad;
  }
  /**
   * Return the base-64 representation of the public key
   */
  ;

  _proto.toString = function toString() {
    return this.toBase64();
  }
  /**
   * Return the Sui address associated with this public key
   */
  ;

  _proto.toSuiAddress = function toSuiAddress() {
    var hexHash = sha3_256(this.toBytes());
    var publicKeyBytes = new BN(hexHash, 16).toArray(undefined, 32); // Only take the first 20 bytes

    var addressBytes = publicKeyBytes.slice(0, 20);
    return toHexString(addressBytes);
  };

  return PublicKey;
}(); // https://stackoverflow.com/questions/34309988/byte-array-to-hex-string-conversion-in-javascript

function toHexString(byteArray) {
  return byteArray.reduce(function (output, elem) {
    return output + ('0' + elem.toString(16)).slice(-2);
  }, '');
}

// Copyright (c) 2022, Mysten Labs, Inc.
/**
 * An Ed25519 Keypair used for signing transactions.
 */

var Ed25519Keypair = /*#__PURE__*/function () {
  /**
   * Create a new keypair instance.
   * Generate random keypair if no {@link Ed25519Keypair} is provided.
   *
   * @param keypair ed25519 keypair
   */
  function Ed25519Keypair(keypair) {
    if (keypair) {
      this.keypair = keypair;
    } else {
      this.keypair = nacl.sign.keyPair();
    }
  }
  /**
   * Generate a new random keypair
   */


  Ed25519Keypair.generate = function generate() {
    return new Ed25519Keypair(nacl.sign.keyPair());
  }
  /**
   * Create a keypair from a raw secret key byte array.
   *
   * This method should only be used to recreate a keypair from a previously
   * generated secret key. Generating keypairs from a random seed should be done
   * with the {@link Keypair.fromSeed} method.
   *
   * @throws error if the provided secret key is invalid and validation is not skipped.
   *
   * @param secretKey secret key byte array
   * @param options: skip secret key validation
   */
  ;

  Ed25519Keypair.fromSecretKey = function fromSecretKey(secretKey, options) {
    var keypair = nacl.sign.keyPair.fromSecretKey(secretKey);

    if (!options || !options.skipValidation) {
      var encoder = new TextEncoder();
      var signData = encoder.encode('sui validation');
      var signature = nacl.sign.detached(signData, keypair.secretKey);

      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {
        throw new Error('provided secretKey is invalid');
      }
    }

    return new Ed25519Keypair(keypair);
  }
  /**
   * Generate a keypair from a 32 byte seed.
   *
   * @param seed seed byte array
   */
  ;

  Ed25519Keypair.fromSeed = function fromSeed(seed) {
    return new Ed25519Keypair(nacl.sign.keyPair.fromSeed(seed));
  }
  /**
   * The public key for this keypair
   */
  ;

  var _proto = Ed25519Keypair.prototype;

  _proto.getPublicKey = function getPublicKey() {
    return new PublicKey(this.keypair.publicKey);
  }
  /**
   * Return the signature for the provided data.
   */
  ;

  _proto.signData = function signData(data) {
    return new Base64DataBuffer(nacl.sign.detached(data.getData(), this.keypair.secretKey));
  };

  return Ed25519Keypair;
}();

// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////
// Exported Abstracts
var Provider = function Provider() {};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

// Copyright (c) 2022, Mysten Labs, Inc.
function isEd25519KeypairData(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && obj.publicKey instanceof Uint8Array && obj.secretKey instanceof Uint8Array;
}
function isKeypair(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && typeof obj.getPublicKey === "function" && typeof obj.signData === "function";
}
function isPublicKeyInitData(obj, _argumentName) {
  return isTransactionDigest(obj) || isSequenceNumber(obj) || obj instanceof Buffer || obj instanceof Uint8Array || Array.isArray(obj) && obj.every(function (e) {
    return isSequenceNumber(e);
  }) || isPublicKeyData$1(obj);
}
function isPublicKeyData$1(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && obj._bn instanceof BN$1;
}
function isTransferObjectTransaction(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.objectId) && (typeof obj.gasPayment === "undefined" || isTransactionDigest(obj.gasPayment)) && isSequenceNumber(obj.gasBudget) && isTransactionDigest(obj.recipient);
}
function isMergeCoinTransaction(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.primaryCoin) && isTransactionDigest(obj.coinToMerge) && (typeof obj.gasPayment === "undefined" || isTransactionDigest(obj.gasPayment)) && isSequenceNumber(obj.gasBudget);
}
function isSplitCoinTransaction(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.coinObjectId) && Array.isArray(obj.splitAmounts) && obj.splitAmounts.every(function (e) {
    return isSequenceNumber(e);
  }) && (typeof obj.gasPayment === "undefined" || isTransactionDigest(obj.gasPayment)) && isSequenceNumber(obj.gasBudget);
}
function isMoveCallTransaction(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.packageObjectId) && isTransactionDigest(obj.module) && isTransactionDigest(obj["function"]) && Array.isArray(obj.typeArguments) && obj.typeArguments.every(function (e) {
    return isTransactionDigest(e);
  }) && Array.isArray(obj.arguments) && obj.arguments.every(function (e) {
    return isSuiJsonValue(e);
  }) && (typeof obj.gasPayment === "undefined" || isTransactionDigest(obj.gasPayment)) && isSequenceNumber(obj.gasBudget);
}
function isPublishTransaction(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && Array.isArray(obj.compiledModules) && obj.compiledModules.every(function (e) {
    return isTransactionDigest(e);
  }) && (typeof obj.gasPayment === "undefined" || isTransactionDigest(obj.gasPayment)) && isSequenceNumber(obj.gasBudget);
}
function isTxnDataSerializer(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && typeof obj.newTransferObject === "function" && typeof obj.newMoveCall === "function" && typeof obj.newMergeCoin === "function" && typeof obj.newSplitCoin === "function" && typeof obj.newPublish === "function";
}
function isSignaturePubkeyPair(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && obj.signature instanceof Base64DataBuffer && obj.pubKey instanceof PublicKey;
}
function isSigner(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && typeof obj.getAddress === "function" && typeof obj.signData === "function";
}
function isTransactionDigest(obj, _argumentName) {
  return typeof obj === "string";
}
function isSuiAddress(obj, _argumentName) {
  return typeof obj === "string";
}
function isObjectOwner(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.AddressOwner) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.ObjectOwner) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.SingleOwner) || obj === "Shared" || obj === "Immutable";
}
function isSuiObjectRef(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.digest) && isTransactionDigest(obj.objectId) && isSequenceNumber(obj.version);
}
function isSuiObjectInfo(obj, _argumentName) {
  return isSuiObjectRef(obj) && (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.type) && isObjectOwner(obj.owner) && isTransactionDigest(obj.previousTransaction);
}
function isObjectContentFields(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && Object.entries(obj).every(function (_ref) {
    var key = _ref[0];
    return isTransactionDigest(key);
  });
}
function isMovePackageContent(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && Object.entries(obj).every(function (_ref2) {
    var key = _ref2[0],
        value = _ref2[1];
    return isTransactionDigest(value) && isTransactionDigest(key);
  });
}
function isSuiData(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isObjectType(obj.dataType) && isSuiMoveObject(obj) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isObjectType(obj.dataType) && isSuiMovePackage(obj);
}
function isSuiMoveObject(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.type) && isObjectContentFields(obj.fields) && typeof obj.has_public_transfer === "boolean";
}
function isSuiMovePackage(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isMovePackageContent(obj.disassembled);
}
function isSuiObject(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isSuiData(obj.data) && isObjectOwner(obj.owner) && isTransactionDigest(obj.previousTransaction) && isSequenceNumber(obj.storageRebate) && isSuiObjectRef(obj.reference);
}
function isObjectStatus(obj, _argumentName) {
  return obj === "Exists" || obj === "NotExists" || obj === "Deleted";
}
function isObjectType(obj, _argumentName) {
  return obj === "moveObject" || obj === "package";
}
function isGetOwnedObjectsResponse(obj, _argumentName) {
  return Array.isArray(obj) && obj.every(function (e) {
    return isSuiObjectInfo(e);
  });
}
function isGetObjectDataResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isObjectStatus(obj.status) && (isTransactionDigest(obj.details) || isSuiObjectRef(obj.details) || isSuiObject(obj.details));
}
function isObjectDigest(obj, _argumentName) {
  return typeof obj === "string";
}
function isObjectId(obj, _argumentName) {
  return typeof obj === "string";
}
function isSequenceNumber(obj, _argumentName) {
  return typeof obj === "number";
}
function isTransferObject(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.recipient) && isSuiObjectRef(obj.objectRef);
}
function isSuiTransferSui(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.recipient) && (obj.amount === null || isSequenceNumber(obj.amount));
}
function isSuiChangeEpoch(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isSequenceNumber(obj.epoch) && isSequenceNumber(obj.storage_charge) && isSequenceNumber(obj.computation_charge);
}
function isTransactionKindName(obj, _argumentName) {
  return obj === "TransferObject" || obj === "Publish" || obj === "Call" || obj === "TransferSui" || obj === "ChangeEpoch";
}
function isSuiTransactionKind(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransferObject(obj.TransferObject) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isSuiMovePackage(obj.Publish) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isMoveCall(obj.Call) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isSuiTransferSui(obj.TransferSui) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isSuiChangeEpoch(obj.ChangeEpoch);
}
function isTransactionData(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && Array.isArray(obj.transactions) && obj.transactions.every(function (e) {
    return isSuiTransactionKind(e);
  }) && isTransactionDigest(obj.sender) && isSuiObjectRef(obj.gasPayment) && isSequenceNumber(obj.gasBudget);
}
function isEpochId(obj, _argumentName) {
  return typeof obj === "number";
}
function isAuthorityQuorumSignInfo(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isSequenceNumber(obj.epoch) && Array.isArray(obj.signatures) && obj.signatures.every(function (e) {
    return isTransactionDigest(e);
  });
}
function isCertifiedTransaction(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.transactionDigest) && isTransactionData(obj.data) && isTransactionDigest(obj.txSignature) && isAuthorityQuorumSignInfo(obj.authSignInfo);
}
function isGasCostSummary(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isSequenceNumber(obj.computationCost) && isSequenceNumber(obj.storageCost) && isSequenceNumber(obj.storageRebate);
}
function isExecutionStatusType(obj, _argumentName) {
  return obj === "success" || obj === "failure";
}
function isExecutionStatus(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isExecutionStatusType(obj.status) && (typeof obj.error === "undefined" || isTransactionDigest(obj.error));
}
function isOwnedObjectRef(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isObjectOwner(obj.owner) && isSuiObjectRef(obj.reference);
}
function isTransactionEffects(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isExecutionStatus(obj.status) && isGasCostSummary(obj.gasUsed) && (typeof obj.sharedObjects === "undefined" || Array.isArray(obj.sharedObjects) && obj.sharedObjects.every(function (e) {
    return isSuiObjectRef(e);
  })) && isTransactionDigest(obj.transactionDigest) && (typeof obj.created === "undefined" || Array.isArray(obj.created) && obj.created.every(function (e) {
    return isOwnedObjectRef(e);
  })) && (typeof obj.mutated === "undefined" || Array.isArray(obj.mutated) && obj.mutated.every(function (e) {
    return isOwnedObjectRef(e);
  })) && (typeof obj.unwrapped === "undefined" || Array.isArray(obj.unwrapped) && obj.unwrapped.every(function (e) {
    return isOwnedObjectRef(e);
  })) && (typeof obj.deleted === "undefined" || Array.isArray(obj.deleted) && obj.deleted.every(function (e) {
    return isSuiObjectRef(e);
  })) && (typeof obj.wrapped === "undefined" || Array.isArray(obj.wrapped) && obj.wrapped.every(function (e) {
    return isSuiObjectRef(e);
  })) && isOwnedObjectRef(obj.gasObject) && (typeof obj.events === "undefined" || Array.isArray(obj.events)) && (typeof obj.dependencies === "undefined" || Array.isArray(obj.dependencies) && obj.dependencies.every(function (e) {
    return isTransactionDigest(e);
  }));
}
function isTransactionEffectsResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isCertifiedTransaction(obj.certificate) && isTransactionEffects(obj.effects) && (obj.timestamp_ms === null || isSequenceNumber(obj.timestamp_ms));
}
function isGatewayTxSeqNumber(obj, _argumentName) {
  return typeof obj === "number";
}
function isGetTxnDigestsResponse(obj, _argumentName) {
  return Array.isArray(obj) && obj.every(function (e) {
    return Array.isArray(e) && isSequenceNumber(e[0]) && isTransactionDigest(e[1]);
  });
}
function isMoveCall(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isSuiObjectRef(obj["package"]) && isTransactionDigest(obj.module) && isTransactionDigest(obj["function"]) && (typeof obj.typeArguments === "undefined" || Array.isArray(obj.typeArguments) && obj.typeArguments.every(function (e) {
    return isTransactionDigest(e);
  })) && (typeof obj.arguments === "undefined" || Array.isArray(obj.arguments) && obj.arguments.every(function (e) {
    return isSuiJsonValue(e);
  }));
}
function isSuiJsonValue(obj, _argumentName) {
  return isTransactionDigest(obj) || isSequenceNumber(obj) || obj === false || obj === true || Array.isArray(obj) && obj.every(function (e) {
    return isTransactionDigest(e) || isSequenceNumber(e) || e === false || e === true;
  });
}
function isEmptySignInfo(obj, _argumentName) {
  return typeof obj === "object";
}
function isAuthorityName(obj, _argumentName) {
  return typeof obj === "string";
}
function isAuthoritySignature(obj, _argumentName) {
  return typeof obj === "string";
}
function isTransactionBytes(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.txBytes) && isSuiObjectRef(obj.gas);
}
function isMergeCoinResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isCertifiedTransaction(obj.certificate) && isSuiObject(obj.updatedCoin) && isSuiObject(obj.updatedGas);
}
function isSplitCoinResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isCertifiedTransaction(obj.certificate) && isSuiObject(obj.updatedCoin) && Array.isArray(obj.newCoins) && obj.newCoins.every(function (e) {
    return isSuiObject(e);
  }) && isSuiObject(obj.updatedGas);
}
function isPublishResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isCertifiedTransaction(obj.certificate) && Array.isArray(obj.createdObjects) && obj.createdObjects.every(function (e) {
    return isSuiObject(e);
  }) && isSuiPackage(obj["package"]) && isSuiObject(obj.updatedGas);
}
function isSuiPackage(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.digest) && isTransactionDigest(obj.objectId) && isSequenceNumber(obj.version);
}
function isTransactionResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionEffectsResponse(obj.EffectResponse) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isSplitCoinResponse(obj.SplitCoinResponse) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isMergeCoinResponse(obj.MergeCoinResponse) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isPublishResponse(obj.PublishResponse);
}

// Copyright (c) 2022, Mysten Labs, Inc.
function isValidResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && obj.jsonrpc === "2.0" && isTransactionDigest(obj.id);
}
function isErrorResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && obj.jsonrpc === "2.0" && isTransactionDigest(obj.id) && (obj.error !== null && typeof obj.error === "object" || typeof obj.error === "function") && isTransactionDigest(obj.error.message);
}

var LosslessJSON = /*#__PURE__*/require('lossless-json');

var JsonRpcClient = /*#__PURE__*/function () {
  function JsonRpcClient(url, httpHeaders) {
    this.rpcClient = this.createRpcClient(url, httpHeaders);
  }

  var _proto = JsonRpcClient.prototype;

  _proto.createRpcClient = function createRpcClient(url, httpHeaders) {
    var client = new RpcClient( /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(request, callback) {
        var options, res, text, result;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = {
                  method: 'POST',
                  body: request,
                  headers: Object.assign({
                    'Content-Type': 'application/json'
                  }, httpHeaders || {})
                };
                _context.prev = 1;
                _context.next = 4;
                return fetch(url, options);

              case 4:
                res = _context.sent;
                _context.next = 7;
                return res.text();

              case 7:
                text = _context.sent;
                result = JSON.stringify(LosslessJSON.parse(text, function (key, value) {
                  if (value == null) {
                    return value;
                  }

                  if (key === 'balance') return value.toString();

                  try {
                    if (value.isLosslessNumber) return value.valueOf();
                  } catch (_unused) {
                    return value.toString();
                  }

                  return value;
                }));

                if (res.ok) {
                  callback(null, result);
                } else {
                  callback(new Error(res.status + " " + res.statusText + ": " + text));
                }

                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](1);
                if (_context.t0 instanceof Error) callback(_context.t0);

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[1, 12]]);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }(), {});
    return client;
  };

  _proto.requestWithType = /*#__PURE__*/function () {
    var _requestWithType = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(method, args, isT) {
      var response;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.request(method, args);

            case 2:
              response = _context2.sent;

              if (!isErrorResponse(response)) {
                _context2.next = 7;
                break;
              }

              throw new Error("RPC Error: " + response.error.message);

            case 7:
              if (!isValidResponse(response)) {
                _context2.next = 13;
                break;
              }

              if (!isT(response.result)) {
                _context2.next = 12;
                break;
              }

              return _context2.abrupt("return", response.result);

            case 12:
              throw new Error("RPC Error: result not of expected type. Result received was: " + JSON.stringify(response.result));

            case 13:
              throw new Error("Unexpected RPC Response: " + response);

            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function requestWithType(_x3, _x4, _x5) {
      return _requestWithType.apply(this, arguments);
    }

    return requestWithType;
  }();

  _proto.request = /*#__PURE__*/function () {
    var _request = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(method, args) {
      var _this = this;

      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", new Promise(function (resolve, reject) {
                _this.rpcClient.request(method, args, function (err, response) {
                  if (err) {
                    reject(err);
                    return;
                  }

                  resolve(response);
                });
              }));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function request(_x6, _x7) {
      return _request.apply(this, arguments);
    }

    return request;
  }();

  _proto.batchRequestWithType = /*#__PURE__*/function () {
    var _batchRequestWithType = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(requests, isT) {
      var responses, validResponses;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.batchRequest(requests);

            case 2:
              responses = _context4.sent;
              // TODO: supports other error modes such as throw or return
              validResponses = responses.filter(function (response) {
                return isValidResponse(response) && isT(response.result);
              });
              return _context4.abrupt("return", validResponses.map(function (response) {
                return response.result;
              }));

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function batchRequestWithType(_x8, _x9) {
      return _batchRequestWithType.apply(this, arguments);
    }

    return batchRequestWithType;
  }();

  _proto.batchRequest = /*#__PURE__*/function () {
    var _batchRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(requests) {
      var _this2 = this;

      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", new Promise(function (resolve, reject) {
                // Do nothing if requests is empty
                if (requests.length === 0) resolve([]);
                var batch = requests.map(function (params) {
                  return _this2.rpcClient.request(params.method, params.args);
                });

                _this2.rpcClient.request(batch, function (err, response) {
                  if (err) {
                    reject(err);
                    return;
                  }

                  resolve(response);
                });
              }));

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    function batchRequest(_x10) {
      return _batchRequest.apply(this, arguments);
    }

    return batchRequest;
  }();

  return JsonRpcClient;
}();

var isNumber = function isNumber(val) {
  return typeof val === 'number';
};

var JsonRpcProvider = /*#__PURE__*/function (_Provider) {
  _inheritsLoose(JsonRpcProvider, _Provider);

  /**
   * Establish a connection to a Sui Gateway endpoint
   *
   * @param endpoint URL to the Sui Gateway endpoint
   */
  function JsonRpcProvider(endpoint) {
    var _this;

    _this = _Provider.call(this) || this;
    _this.endpoint = endpoint;
    _this.client = new JsonRpcClient(endpoint);
    return _this;
  } // Objects


  var _proto = JsonRpcProvider.prototype;

  _proto.getObjectsOwnedByAddress =
  /*#__PURE__*/
  function () {
    var _getObjectsOwnedByAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(address) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return this.client.requestWithType('sui_getObjectsOwnedByAddress', [address], isGetOwnedObjectsResponse);

            case 3:
              return _context.abrupt("return", _context.sent);

            case 6:
              _context.prev = 6;
              _context.t0 = _context["catch"](0);
              throw new Error("Error fetching owned object: " + _context.t0 + " for address " + address);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 6]]);
    }));

    function getObjectsOwnedByAddress(_x) {
      return _getObjectsOwnedByAddress.apply(this, arguments);
    }

    return getObjectsOwnedByAddress;
  }();

  _proto.getObjectsOwnedByObject = /*#__PURE__*/function () {
    var _getObjectsOwnedByObject = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(objectId) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return this.client.requestWithType('sui_getObjectsOwnedByObject', [objectId], isGetOwnedObjectsResponse);

            case 3:
              return _context2.abrupt("return", _context2.sent);

            case 6:
              _context2.prev = 6;
              _context2.t0 = _context2["catch"](0);
              throw new Error("Error fetching owned object: " + _context2.t0 + " for objectId " + objectId);

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 6]]);
    }));

    function getObjectsOwnedByObject(_x2) {
      return _getObjectsOwnedByObject.apply(this, arguments);
    }

    return getObjectsOwnedByObject;
  }();

  _proto.getObject = /*#__PURE__*/function () {
    var _getObject = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(objectId) {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              _context3.next = 3;
              return this.client.requestWithType('sui_getObject', [objectId], isGetObjectDataResponse);

            case 3:
              return _context3.abrupt("return", _context3.sent);

            case 6:
              _context3.prev = 6;
              _context3.t0 = _context3["catch"](0);
              throw new Error("Error fetching object info: " + _context3.t0 + " for id " + objectId);

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 6]]);
    }));

    function getObject(_x3) {
      return _getObject.apply(this, arguments);
    }

    return getObject;
  }();

  _proto.getObjectBatch = /*#__PURE__*/function () {
    var _getObjectBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(objectIds) {
      var requests;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              requests = objectIds.map(function (id) {
                return {
                  method: 'sui_getObject',
                  args: [id]
                };
              });
              _context4.prev = 1;
              _context4.next = 4;
              return this.client.batchRequestWithType(requests, isGetObjectDataResponse);

            case 4:
              return _context4.abrupt("return", _context4.sent);

            case 7:
              _context4.prev = 7;
              _context4.t0 = _context4["catch"](1);
              throw new Error("Error fetching object info: " + _context4.t0 + " for id " + objectIds);

            case 10:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[1, 7]]);
    }));

    function getObjectBatch(_x4) {
      return _getObjectBatch.apply(this, arguments);
    }

    return getObjectBatch;
  }() // Transactions
  ;

  _proto.getTransactionsForObject =
  /*#__PURE__*/
  function () {
    var _getTransactionsForObject = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(objectID) {
      var requests, results;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              requests = [{
                method: 'sui_getTransactionsByInputObject',
                args: [objectID]
              }, {
                method: 'sui_getTransactionsByMutatedObject',
                args: [objectID]
              }];
              _context5.prev = 1;
              _context5.next = 4;
              return this.client.batchRequestWithType(requests, isGetTxnDigestsResponse);

            case 4:
              results = _context5.sent;
              return _context5.abrupt("return", [].concat(results[0], results[1]));

            case 8:
              _context5.prev = 8;
              _context5.t0 = _context5["catch"](1);
              throw new Error("Error getting transactions for object: " + _context5.t0 + " for id " + objectID);

            case 11:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[1, 8]]);
    }));

    function getTransactionsForObject(_x5) {
      return _getTransactionsForObject.apply(this, arguments);
    }

    return getTransactionsForObject;
  }();

  _proto.getTransactionsForAddress = /*#__PURE__*/function () {
    var _getTransactionsForAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(addressID) {
      var requests, results;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              requests = [{
                method: 'sui_getTransactionsToAddress',
                args: [addressID]
              }, {
                method: 'sui_getTransactionsFromAddress',
                args: [addressID]
              }];
              _context6.prev = 1;
              _context6.next = 4;
              return this.client.batchRequestWithType(requests, isGetTxnDigestsResponse);

            case 4:
              results = _context6.sent;
              return _context6.abrupt("return", [].concat(results[0], results[1]));

            case 8:
              _context6.prev = 8;
              _context6.t0 = _context6["catch"](1);
              throw new Error("Error getting transactions for address: " + _context6.t0 + " for id " + addressID);

            case 11:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[1, 8]]);
    }));

    function getTransactionsForAddress(_x6) {
      return _getTransactionsForAddress.apply(this, arguments);
    }

    return getTransactionsForAddress;
  }();

  _proto.getTransactionWithEffects = /*#__PURE__*/function () {
    var _getTransactionWithEffects = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(digest) {
      var resp;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.prev = 0;
              _context7.next = 3;
              return this.client.requestWithType('sui_getTransaction', [digest], isTransactionEffectsResponse);

            case 3:
              resp = _context7.sent;
              return _context7.abrupt("return", resp);

            case 7:
              _context7.prev = 7;
              _context7.t0 = _context7["catch"](0);
              throw new Error("Error getting transaction with effects: " + _context7.t0 + " for digest " + digest);

            case 10:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this, [[0, 7]]);
    }));

    function getTransactionWithEffects(_x7) {
      return _getTransactionWithEffects.apply(this, arguments);
    }

    return getTransactionWithEffects;
  }();

  _proto.getTransactionWithEffectsBatch = /*#__PURE__*/function () {
    var _getTransactionWithEffectsBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(digests) {
      var requests, list;
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              requests = digests.map(function (d) {
                return {
                  method: 'sui_getTransaction',
                  args: [d]
                };
              });
              _context8.prev = 1;
              _context8.next = 4;
              return this.client.batchRequestWithType(requests, isTransactionEffectsResponse);

            case 4:
              return _context8.abrupt("return", _context8.sent);

            case 7:
              _context8.prev = 7;
              _context8.t0 = _context8["catch"](1);
              list = digests.join(', ').substring(0, -2);
              throw new Error("Error getting transaction effects: " + _context8.t0 + " for digests [" + list + "]");

            case 11:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this, [[1, 7]]);
    }));

    function getTransactionWithEffectsBatch(_x8) {
      return _getTransactionWithEffectsBatch.apply(this, arguments);
    }

    return getTransactionWithEffectsBatch;
  }();

  _proto.executeTransaction = /*#__PURE__*/function () {
    var _executeTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(txnBytes, signature, pubkey) {
      var resp;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.prev = 0;
              _context9.next = 3;
              return this.client.requestWithType('sui_executeTransaction', [txnBytes, signature, pubkey], isTransactionResponse);

            case 3:
              resp = _context9.sent;
              return _context9.abrupt("return", resp);

            case 7:
              _context9.prev = 7;
              _context9.t0 = _context9["catch"](0);
              throw new Error("Error executing transaction: " + _context9.t0 + "}");

            case 10:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this, [[0, 7]]);
    }));

    function executeTransaction(_x9, _x10, _x11) {
      return _executeTransaction.apply(this, arguments);
    }

    return executeTransaction;
  }();

  _proto.getTotalTransactionNumber = /*#__PURE__*/function () {
    var _getTotalTransactionNumber = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10() {
      var resp;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.prev = 0;
              _context10.next = 3;
              return this.client.requestWithType('sui_getTotalTransactionNumber', [], isNumber);

            case 3:
              resp = _context10.sent;
              return _context10.abrupt("return", resp);

            case 7:
              _context10.prev = 7;
              _context10.t0 = _context10["catch"](0);
              throw new Error("Error fetching total transaction number: " + _context10.t0);

            case 10:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this, [[0, 7]]);
    }));

    function getTotalTransactionNumber() {
      return _getTotalTransactionNumber.apply(this, arguments);
    }

    return getTotalTransactionNumber;
  }();

  _proto.getTransactionDigestsInRange = /*#__PURE__*/function () {
    var _getTransactionDigestsInRange = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(start, end) {
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.prev = 0;
              _context11.next = 3;
              return this.client.requestWithType('sui_getTransactionsInRange', [start, end], isGetTxnDigestsResponse);

            case 3:
              return _context11.abrupt("return", _context11.sent);

            case 6:
              _context11.prev = 6;
              _context11.t0 = _context11["catch"](0);
              throw new Error("Error fetching transaction digests in range: " + _context11.t0 + " for range " + start + "-" + end);

            case 9:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this, [[0, 6]]);
    }));

    function getTransactionDigestsInRange(_x12, _x13) {
      return _getTransactionDigestsInRange.apply(this, arguments);
    }

    return getTransactionDigestsInRange;
  }();

  _proto.getRecentTransactions = /*#__PURE__*/function () {
    var _getRecentTransactions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(count) {
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.prev = 0;
              _context12.next = 3;
              return this.client.requestWithType('sui_getRecentTransactions', [count], isGetTxnDigestsResponse);

            case 3:
              return _context12.abrupt("return", _context12.sent);

            case 6:
              _context12.prev = 6;
              _context12.t0 = _context12["catch"](0);
              throw new Error("Error fetching recent transactions: " + _context12.t0 + " for count " + count);

            case 9:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this, [[0, 6]]);
    }));

    function getRecentTransactions(_x14) {
      return _getRecentTransactions.apply(this, arguments);
    }

    return getRecentTransactions;
  }();

  return JsonRpcProvider;
}(Provider);

// Copyright (c) 2022, Mysten Labs, Inc.
var HexDataBuffer = /*#__PURE__*/function () {
  function HexDataBuffer(data) {
    if (typeof data === 'string') {
      this._data = new Uint8Array(Buffer$1.from(data, 'hex'));
    } else {
      this._data = data;
    }
  }

  var _proto = HexDataBuffer.prototype;

  _proto.getData = function getData() {
    return this._data;
  };

  _proto.getLength = function getLength() {
    return this._data.length;
  };

  _proto.toString = function toString() {
    return Buffer$1.from(this._data).toString('hex');
  };

  return HexDataBuffer;
}();

/**
 * This is a temporary implementation of the `TxnDataSerializer` class
 * that uses the Sui Gateway RPC API to serialize a transaction into BCS bytes.
 * This class will be deprecated once we support BCS serialization in TypeScript.
 * It is not safe to use this class in production because one cannot authenticate
 * the encoding.
 */

var RpcTxnDataSerializer = /*#__PURE__*/function () {
  /**
   * Establish a connection to a Sui Gateway endpoint
   *
   * @param endpoint URL to the Sui Gateway endpoint
   */
  function RpcTxnDataSerializer(endpoint) {
    this.client = new JsonRpcClient(endpoint);
  }

  var _proto = RpcTxnDataSerializer.prototype;

  _proto.newTransferObject = /*#__PURE__*/function () {
    var _newTransferObject = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(signerAddress, t) {
      var resp;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return this.client.requestWithType('sui_transferObject', [signerAddress, t.objectId, t.gasPayment, t.gasBudget, t.recipient], isTransactionBytes);

            case 3:
              resp = _context.sent;
              return _context.abrupt("return", new Base64DataBuffer(resp.txBytes));

            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);
              throw new Error("Error transferring coin: " + _context.t0 + " with args " + t);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 7]]);
    }));

    function newTransferObject(_x, _x2) {
      return _newTransferObject.apply(this, arguments);
    }

    return newTransferObject;
  }();

  _proto.newMoveCall = /*#__PURE__*/function () {
    var _newMoveCall = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(signerAddress, t) {
      var resp;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return this.client.requestWithType('sui_moveCall', [signerAddress, t.packageObjectId, t.module, t["function"], t.typeArguments, t.arguments, t.gasPayment, t.gasBudget], isTransactionBytes);

            case 3:
              resp = _context2.sent;
              return _context2.abrupt("return", new Base64DataBuffer(resp.txBytes));

            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](0);
              throw new Error("Error executing a move call: " + _context2.t0 + " with args " + t);

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 7]]);
    }));

    function newMoveCall(_x3, _x4) {
      return _newMoveCall.apply(this, arguments);
    }

    return newMoveCall;
  }();

  _proto.newMergeCoin = /*#__PURE__*/function () {
    var _newMergeCoin = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(signerAddress, t) {
      var resp;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              _context3.next = 3;
              return this.client.requestWithType('sui_mergeCoins', [signerAddress, t.primaryCoin, t.coinToMerge, t.gasPayment, t.gasBudget], isTransactionBytes);

            case 3:
              resp = _context3.sent;
              return _context3.abrupt("return", new Base64DataBuffer(resp.txBytes));

            case 7:
              _context3.prev = 7;
              _context3.t0 = _context3["catch"](0);
              throw new Error("Error merging coin: " + _context3.t0);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 7]]);
    }));

    function newMergeCoin(_x5, _x6) {
      return _newMergeCoin.apply(this, arguments);
    }

    return newMergeCoin;
  }();

  _proto.newSplitCoin = /*#__PURE__*/function () {
    var _newSplitCoin = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(signerAddress, t) {
      var resp;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              _context4.next = 3;
              return this.client.requestWithType('sui_splitCoin', [signerAddress, t.coinObjectId, t.splitAmounts, t.gasPayment, t.gasBudget], isTransactionBytes);

            case 3:
              resp = _context4.sent;
              return _context4.abrupt("return", new Base64DataBuffer(resp.txBytes));

            case 7:
              _context4.prev = 7;
              _context4.t0 = _context4["catch"](0);
              throw new Error("Error splitting coin: " + _context4.t0);

            case 10:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[0, 7]]);
    }));

    function newSplitCoin(_x7, _x8) {
      return _newSplitCoin.apply(this, arguments);
    }

    return newSplitCoin;
  }();

  _proto.newPublish = /*#__PURE__*/function () {
    var _newPublish = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(signerAddress, t) {
      var resp;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;
              _context5.next = 3;
              return this.client.requestWithType('sui_publish', [signerAddress, t.compiledModules, t.gasPayment, t.gasBudget], isTransactionBytes);

            case 3:
              resp = _context5.sent;
              return _context5.abrupt("return", new Base64DataBuffer(resp.txBytes));

            case 7:
              _context5.prev = 7;
              _context5.t0 = _context5["catch"](0);
              throw new Error("Error publishing package " + _context5.t0);

            case 10:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[0, 7]]);
    }));

    function newPublish(_x9, _x10) {
      return _newPublish.apply(this, arguments);
    }

    return newPublish;
  }();

  return RpcTxnDataSerializer;
}();

var VoidProvider = /*#__PURE__*/function (_Provider) {
  _inheritsLoose(VoidProvider, _Provider);

  function VoidProvider() {
    return _Provider.apply(this, arguments) || this;
  }

  var _proto = VoidProvider.prototype;

  // Objects
  _proto.getObjectsOwnedByAddress =
  /*#__PURE__*/
  function () {
    var _getObjectsOwnedByAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(_address) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              throw this.newError('getOwnedObjects');

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getObjectsOwnedByAddress(_x) {
      return _getObjectsOwnedByAddress.apply(this, arguments);
    }

    return getObjectsOwnedByAddress;
  }();

  _proto.getObject = /*#__PURE__*/function () {
    var _getObject = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(_objectId) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              throw this.newError('getObject');

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getObject(_x2) {
      return _getObject.apply(this, arguments);
    }

    return getObject;
  }() // Transactions
  ;

  _proto.getTransaction =
  /*#__PURE__*/
  function () {
    var _getTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(_digest) {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              throw this.newError('getTransaction');

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getTransaction(_x3) {
      return _getTransaction.apply(this, arguments);
    }

    return getTransaction;
  }();

  _proto.executeTransaction = /*#__PURE__*/function () {
    var _executeTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(_txnBytes, _signature, _pubkey) {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              throw this.newError('executeTransaction');

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function executeTransaction(_x4, _x5, _x6) {
      return _executeTransaction.apply(this, arguments);
    }

    return executeTransaction;
  }();

  _proto.getTotalTransactionNumber = /*#__PURE__*/function () {
    var _getTotalTransactionNumber = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              throw this.newError('getTotalTransactionNumber');

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getTotalTransactionNumber() {
      return _getTotalTransactionNumber.apply(this, arguments);
    }

    return getTotalTransactionNumber;
  }();

  _proto.getTransactionDigestsInRange = /*#__PURE__*/function () {
    var _getTransactionDigestsInRange = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(_start, _end) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              throw this.newError('getTransactionDigestsInRange');

            case 1:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getTransactionDigestsInRange(_x7, _x8) {
      return _getTransactionDigestsInRange.apply(this, arguments);
    }

    return getTransactionDigestsInRange;
  }();

  _proto.getRecentTransactions = /*#__PURE__*/function () {
    var _getRecentTransactions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(_count) {
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              throw this.newError('getRecentTransactions');

            case 1:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getRecentTransactions(_x9) {
      return _getRecentTransactions.apply(this, arguments);
    }

    return getRecentTransactions;
  }();

  _proto.newError = function newError(operation) {
    return new Error("Please use a valid provider for " + operation);
  };

  return VoidProvider;
}(Provider);

// Exported Abstracts

var SignerWithProvider = /*#__PURE__*/function () {
  ///////////////////
  // Sub-classes MAY override these
  function SignerWithProvider(provider, serializer) {
    this.provider = provider || new VoidProvider();
    var endpoint = '';

    if (this.provider instanceof JsonRpcProvider) {
      endpoint = this.provider.endpoint;
    }

    this.serializer = serializer || new RpcTxnDataSerializer(endpoint);
  }
  /**
   * Sign a transaction and submit to the Gateway for execution
   *
   * @param txBytes BCS serialised TransactionData bytes
   */


  var _proto = SignerWithProvider.prototype;

  _proto.signAndExecuteTransaction =
  /*#__PURE__*/
  function () {
    var _signAndExecuteTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(txBytes) {
      var sig;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.signData(txBytes);

            case 2:
              sig = _context.sent;
              _context.next = 5;
              return this.provider.executeTransaction(txBytes.toString(), sig.signature.toString(), sig.pubKey.toString());

            case 5:
              return _context.abrupt("return", _context.sent);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function signAndExecuteTransaction(_x) {
      return _signAndExecuteTransaction.apply(this, arguments);
    }

    return signAndExecuteTransaction;
  }()
  /**
   * Serialize and Sign a `TransferObject` transaction and submit to the Gateway for execution
   */
  ;

  _proto.transferObject =
  /*#__PURE__*/
  function () {
    var _transferObject = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(transaction) {
      var signerAddress, txBytes;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.getAddress();

            case 2:
              signerAddress = _context2.sent;
              _context2.next = 5;
              return this.serializer.newTransferObject(signerAddress, transaction);

            case 5:
              txBytes = _context2.sent;
              _context2.next = 8;
              return this.signAndExecuteTransaction(txBytes);

            case 8:
              return _context2.abrupt("return", _context2.sent);

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function transferObject(_x2) {
      return _transferObject.apply(this, arguments);
    }

    return transferObject;
  }()
  /**
   * Serialize and Sign a `MergeCoin` transaction and submit to the Gateway for execution
   */
  ;

  _proto.mergeCoin =
  /*#__PURE__*/
  function () {
    var _mergeCoin = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(transaction) {
      var signerAddress, txBytes;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getAddress();

            case 2:
              signerAddress = _context3.sent;
              _context3.next = 5;
              return this.serializer.newMergeCoin(signerAddress, transaction);

            case 5:
              txBytes = _context3.sent;
              _context3.next = 8;
              return this.signAndExecuteTransaction(txBytes);

            case 8:
              return _context3.abrupt("return", _context3.sent);

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function mergeCoin(_x3) {
      return _mergeCoin.apply(this, arguments);
    }

    return mergeCoin;
  }()
  /**
   * Serialize and Sign a `SplitCoin` transaction and submit to the Gateway for execution
   */
  ;

  _proto.splitCoin =
  /*#__PURE__*/
  function () {
    var _splitCoin = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(transaction) {
      var signerAddress, txBytes;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.getAddress();

            case 2:
              signerAddress = _context4.sent;
              _context4.next = 5;
              return this.serializer.newSplitCoin(signerAddress, transaction);

            case 5:
              txBytes = _context4.sent;
              _context4.next = 8;
              return this.signAndExecuteTransaction(txBytes);

            case 8:
              return _context4.abrupt("return", _context4.sent);

            case 9:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function splitCoin(_x4) {
      return _splitCoin.apply(this, arguments);
    }

    return splitCoin;
  }()
  /**
   * Serialize and Sign a `MoveCall` transaction and submit to the Gateway for execution
   */
  ;

  _proto.executeMoveCall =
  /*#__PURE__*/
  function () {
    var _executeMoveCall = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(transaction) {
      var signerAddress, txBytes;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.getAddress();

            case 2:
              signerAddress = _context5.sent;
              _context5.next = 5;
              return this.serializer.newMoveCall(signerAddress, transaction);

            case 5:
              txBytes = _context5.sent;
              _context5.next = 8;
              return this.signAndExecuteTransaction(txBytes);

            case 8:
              return _context5.abrupt("return", _context5.sent);

            case 9:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function executeMoveCall(_x5) {
      return _executeMoveCall.apply(this, arguments);
    }

    return executeMoveCall;
  }();

  _proto.publish = /*#__PURE__*/function () {
    var _publish = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(transaction) {
      var signerAddress, txBytes;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.getAddress();

            case 2:
              signerAddress = _context6.sent;
              _context6.next = 5;
              return this.serializer.newPublish(signerAddress, transaction);

            case 5:
              txBytes = _context6.sent;
              _context6.next = 8;
              return this.signAndExecuteTransaction(txBytes);

            case 8:
              return _context6.abrupt("return", _context6.sent);

            case 9:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function publish(_x6) {
      return _publish.apply(this, arguments);
    }

    return publish;
  }();

  return SignerWithProvider;
}();

var RawSigner = /*#__PURE__*/function (_SignerWithProvider) {
  _inheritsLoose(RawSigner, _SignerWithProvider);

  function RawSigner(keypair, provider, serializer) {
    var _this;

    _this = _SignerWithProvider.call(this, provider, serializer) || this;
    _this.keypair = keypair;
    return _this;
  }

  var _proto = RawSigner.prototype;

  _proto.getAddress = /*#__PURE__*/function () {
    var _getAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.keypair.getPublicKey().toSuiAddress());

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getAddress() {
      return _getAddress.apply(this, arguments);
    }

    return getAddress;
  }();

  _proto.signData = /*#__PURE__*/function () {
    var _signData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(data) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", {
                signature: this.keypair.signData(data),
                pubKey: this.keypair.getPublicKey()
              });

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function signData(_x) {
      return _signData.apply(this, arguments);
    }

    return signData;
  }();

  _proto.connect = function connect(provider) {
    return new RawSigner(this.keypair, provider);
  };

  return RawSigner;
}(SignerWithProvider);

// Copyright (c) 2022, Mysten Labs, Inc.
// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L171

var TX_DIGEST_LENGTH = 32; // taken from https://rgxdb.com/r/1NUN74O6

var VALID_BASE64_REGEX = /^(?:[a-zA-Z0-9+\/]{4})*(?:|(?:[a-zA-Z0-9+\/]{3}=)|(?:[a-zA-Z0-9+\/]{2}==)|(?:[a-zA-Z0-9+\/]{1}===))$/;
function isValidTransactionDigest(value) {
  return new Base64DataBuffer(value).getLength() === TX_DIGEST_LENGTH && VALID_BASE64_REGEX.test(value);
} // TODO - can we automatically sync this with rust length definition?
// Source of truth is
// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L67
// which uses the Move account address length
// https://github.com/move-language/move/blob/67ec40dc50c66c34fd73512fcc412f3b68d67235/language/move-core/types/src/account_address.rs#L23 .

var SUI_ADDRESS_LENGTH = 20;
function isValidSuiAddress(value) {
  return isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;
}
function isValidSuiObjectId(value) {
  return isValidSuiAddress(value);
}

function isHex(value) {
  return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;
}

function getHexByteLength(value) {
  return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;
}

// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

/* -------------------------------------------------------------------------- */

/*                              Helper functions                              */

/* -------------------------------------------------------------------------- */

/* -------------------------- GetObjectDataResponse ------------------------- */
function getObjectExistsResponse(resp) {
  return resp.status !== 'Exists' ? undefined : resp.details;
}
function getObjectDeletedResponse(resp) {
  return resp.status !== 'Deleted' ? undefined : resp.details;
}
function getObjectNotExistsResponse(resp) {
  return resp.status !== 'NotExists' ? undefined : resp.details;
}
function getObjectReference(resp) {
  var _getObjectExistsRespo;

  return ((_getObjectExistsRespo = getObjectExistsResponse(resp)) == null ? void 0 : _getObjectExistsRespo.reference) || getObjectDeletedResponse(resp);
}
/* ------------------------------ SuiObjectRef ------------------------------ */

function getObjectId(data) {
  var _getObjectReference$o, _getObjectReference;

  if ('objectId' in data) {
    return data.objectId;
  }

  return (_getObjectReference$o = (_getObjectReference = getObjectReference(data)) == null ? void 0 : _getObjectReference.objectId) != null ? _getObjectReference$o : getObjectNotExistsResponse(data);
}
function getObjectVersion(data) {
  var _getObjectReference2;

  if ('version' in data) {
    return data.version;
  }

  return (_getObjectReference2 = getObjectReference(data)) == null ? void 0 : _getObjectReference2.version;
}
/* -------------------------------- SuiObject ------------------------------- */

function getObjectType(resp) {
  var _getObjectExistsRespo2;

  return (_getObjectExistsRespo2 = getObjectExistsResponse(resp)) == null ? void 0 : _getObjectExistsRespo2.data.dataType;
}
function getObjectPreviousTransactionDigest(resp) {
  var _getObjectExistsRespo3;

  return (_getObjectExistsRespo3 = getObjectExistsResponse(resp)) == null ? void 0 : _getObjectExistsRespo3.previousTransaction;
}
function getObjectOwner(resp) {
  var _getObjectExistsRespo4;

  return (_getObjectExistsRespo4 = getObjectExistsResponse(resp)) == null ? void 0 : _getObjectExistsRespo4.owner;
}
function getMoveObjectType(resp) {
  var _getMoveObject;

  return (_getMoveObject = getMoveObject(resp)) == null ? void 0 : _getMoveObject.type;
}
function getObjectFields(resp) {
  var _getMoveObject2;

  return (_getMoveObject2 = getMoveObject(resp)) == null ? void 0 : _getMoveObject2.fields;
}
function getMoveObject(data) {
  var suiObject = 'data' in data ? data : getObjectExistsResponse(data);

  if ((suiObject == null ? void 0 : suiObject.data.dataType) !== 'moveObject') {
    return undefined;
  }

  return suiObject.data;
}
function hasPublicTransfer(data) {
  var _getMoveObject$has_pu, _getMoveObject3;

  return (_getMoveObject$has_pu = (_getMoveObject3 = getMoveObject(data)) == null ? void 0 : _getMoveObject3.has_public_transfer) != null ? _getMoveObject$has_pu : false;
}
function getMovePackageContent(data) {
  if ('disassembled' in data) {
    return data.disassembled;
  }

  var suiObject = getObjectExistsResponse(data);

  if ((suiObject == null ? void 0 : suiObject.data.dataType) !== 'package') {
    return undefined;
  }

  return suiObject.data.disassembled;
}

// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

/* -------------------------------------------------------------------------- */

/*                              Helper functions                              */

/* -------------------------------------------------------------------------- */

/* ---------------------------------- CertifiedTransaction --------------------------------- */
function getTransactionDigest(tx) {
  return tx.transactionDigest;
}
function getTransactionSignature(tx) {
  return tx.txSignature;
}
function getTransactionAuthorityQuorumSignInfo(tx) {
  return tx.authSignInfo;
}
function getTransactionData(tx) {
  return tx.data;
}
/* ----------------------------- TransactionData ---------------------------- */

function getTransactionSender(tx) {
  return tx.data.sender;
}
function getTransactionGasObject(tx) {
  return tx.data.gasPayment;
}
function getTransactionGasBudget(tx) {
  return tx.data.gasBudget;
}
function getTransferObjectTransaction(data) {
  return 'TransferObject' in data ? data.TransferObject : undefined;
}
function getPublishTransaction(data) {
  return 'Publish' in data ? data.Publish : undefined;
}
function getMoveCallTransaction(data) {
  return 'Call' in data ? data.Call : undefined;
}
function getTransferSuiTransaction(data) {
  return 'TransferSui' in data ? data.TransferSui : undefined;
}
function getChangeEpochTransaction(data) {
  return 'ChangeEpoch' in data ? data.ChangeEpoch : undefined;
}
function getTransactions(data) {
  return data.data.transactions;
}
function getTransactionKindName(data) {
  return Object.keys(data)[0];
}
/* ----------------------------- ExecutionStatus ---------------------------- */

function getExecutionStatusType(data) {
  return getExecutionStatus(data).status;
}
function getExecutionStatus(data) {
  return data.effects.status;
}
function getExecutionStatusError(data) {
  return getExecutionStatus(data).error;
}
function getExecutionStatusGasSummary(data) {
  return data.effects.gasUsed;
}
function getTotalGasUsed(data) {
  var gasSummary = getExecutionStatusGasSummary(data);
  return gasSummary.computationCost + gasSummary.storageCost - gasSummary.storageRebate;
}
/* --------------------------- TransactionResponse -------------------------- */

function getTransactionEffectsResponse(data) {
  return 'EffectResponse' in data ? data.EffectResponse : undefined;
}
function getSplitCoinResponse(data) {
  return 'SplitCoinResponse' in data ? data.SplitCoinResponse : undefined;
}
function getMergeCoinResponse(data) {
  return 'MergeCoinResponse' in data ? data.MergeCoinResponse : undefined;
}
function getPublishResponse(data) {
  return 'PublishResponse' in data ? data.PublishResponse : undefined;
}
/**
 * Get the updated coin after a merge.
 * @param data the response for executing a merge coin transaction
 * @returns the updated state of the primary coin after the merge
 */

function getCoinAfterMerge(data) {
  var _getMergeCoinResponse;

  return (_getMergeCoinResponse = getMergeCoinResponse(data)) == null ? void 0 : _getMergeCoinResponse.updatedCoin;
}
/**
 * Get the updated coin after a split.
 * @param data the response for executing a Split coin transaction
 * @returns the updated state of the original coin object used for the split
 */

function getCoinAfterSplit(data) {
  var _getSplitCoinResponse;

  return (_getSplitCoinResponse = getSplitCoinResponse(data)) == null ? void 0 : _getSplitCoinResponse.updatedCoin;
}
/**
 * Get the newly created coin after a split.
 * @param data the response for executing a Split coin transaction
 * @returns the updated state of the original coin object used for the split
 */

function getNewlyCreatedCoinsAfterSplit(data) {
  var _getSplitCoinResponse2;

  return (_getSplitCoinResponse2 = getSplitCoinResponse(data)) == null ? void 0 : _getSplitCoinResponse2.newCoins;
}

// Copyright (c) 2022, Mysten Labs, Inc.
/**
 * Utility class for 0x2::coin
 * as defined in https://github.com/MystenLabs/sui/blob/ca9046fd8b1a9e8634a4b74b0e7dabdc7ea54475/sui_programmability/framework/sources/Coin.move#L4
 */

var Coin = /*#__PURE__*/function () {
  function Coin() {}

  Coin.isCoin = function isCoin(data) {
    var _getMoveObjectType$st, _getMoveObjectType;

    return (_getMoveObjectType$st = (_getMoveObjectType = getMoveObjectType(data)) == null ? void 0 : _getMoveObjectType.startsWith('0x2::coin::Coin')) != null ? _getMoveObjectType$st : false;
  };

  Coin.getBalance = function getBalance(data) {
    var _getObjectFields;

    if (!Coin.isCoin(data)) {
      return undefined;
    }

    var balance = (_getObjectFields = getObjectFields(data)) == null ? void 0 : _getObjectFields.balance;
    return new BN.BN(balance, 10);
  };

  Coin.getZero = function getZero() {
    return new BN.BN('0', 10);
  };

  return Coin;
}();

export { Base64DataBuffer, Coin, Ed25519Keypair, HexDataBuffer, JsonRpcProvider, PUBLIC_KEY_SIZE, Provider, PublicKey, RawSigner, RpcTxnDataSerializer, SignerWithProvider, getChangeEpochTransaction, getCoinAfterMerge, getCoinAfterSplit, getExecutionStatus, getExecutionStatusError, getExecutionStatusGasSummary, getExecutionStatusType, getMergeCoinResponse, getMoveCallTransaction, getMoveObject, getMoveObjectType, getMovePackageContent, getNewlyCreatedCoinsAfterSplit, getObjectDeletedResponse, getObjectExistsResponse, getObjectFields, getObjectId, getObjectNotExistsResponse, getObjectOwner, getObjectPreviousTransactionDigest, getObjectReference, getObjectType, getObjectVersion, getPublishResponse, getPublishTransaction, getSplitCoinResponse, getTotalGasUsed, getTransactionAuthorityQuorumSignInfo, getTransactionData, getTransactionDigest, getTransactionEffectsResponse, getTransactionGasBudget, getTransactionGasObject, getTransactionKindName, getTransactionSender, getTransactionSignature, getTransactions, getTransferObjectTransaction, getTransferSuiTransaction, hasPublicTransfer, isAuthorityName, isAuthorityQuorumSignInfo, isAuthoritySignature, isCertifiedTransaction, isEd25519KeypairData, isEmptySignInfo, isEpochId, isExecutionStatus, isExecutionStatusType, isGasCostSummary, isGatewayTxSeqNumber, isGetObjectDataResponse, isGetOwnedObjectsResponse, isGetTxnDigestsResponse, isKeypair, isMergeCoinResponse, isMergeCoinTransaction, isMoveCall, isMoveCallTransaction, isMovePackageContent, isObjectContentFields, isObjectDigest, isObjectId, isObjectOwner, isObjectStatus, isObjectType, isOwnedObjectRef, isPublicKeyData$1 as isPublicKeyData, isPublicKeyInitData, isPublishResponse, isPublishTransaction, isSequenceNumber, isSignaturePubkeyPair, isSigner, isSplitCoinResponse, isSplitCoinTransaction, isSuiAddress, isSuiChangeEpoch, isSuiData, isSuiJsonValue, isSuiMoveObject, isSuiMovePackage, isSuiObject, isSuiObjectInfo, isSuiObjectRef, isSuiPackage, isSuiTransactionKind, isSuiTransferSui, isTransactionBytes, isTransactionData, isTransactionDigest, isTransactionEffects, isTransactionEffectsResponse, isTransactionKindName, isTransactionResponse, isTransferObject, isTransferObjectTransaction, isTxnDataSerializer, isValidSuiAddress, isValidSuiObjectId, isValidTransactionDigest };
//# sourceMappingURL=sui.js.esm.js.map
